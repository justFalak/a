Question:- Regula Falsi method

answer :-

MAX_ITER = 1000000

def func(x):
    return (x * x * x - x * x + 2)

def regulaFalsi(a, b):
    if func(a) * func(b) >= 0:
        print("You have not assumed right a and b")
        return -1
    
    c = a 
    
    for i in range(MAX_ITER):
        
        c = (a * func(b) - b * func(a)) / (func(b) - func(a))
        
        
        if func(c) == 0:
            break
        
        elif func(c) * func(a) < 0:
            b = c
        else:
            a = c
    print("The value of root is:", '%.4f' % c)

a = -200
b = 300
regulaFalsi(a, b)







Question:-Newton's method


Answer:-

def func( x ):
	return x * x * x - x * x + 2


def derivFunc( x ):
	return 3 * x * x - 2 * x


def newtonRaphson( x ):
	h = func(x) / derivFunc(x)
	while abs(h) >= 0.0001:
		h = func(x)/derivFunc(x)
		
		# x(i+1) = x(i) - f(x) / f'(x)
		x = x - h
	
	print("The value of the root is : ",
							"%.4f"% x)


x0 = -20 # Initial values assumed
newtonRaphson(x0)




Question:- Gaussian Elimination method

answer :- 

def gaussian_elimination(mat):
    n = len(mat)
    for i in range(n):
        pivot_row = max(range(i, n), key=lambda x: abs(mat[x][i]))
        mat[i], mat[pivot_row] = mat[pivot_row], mat[i]
        for j in range(i + 1, n):
            factor = mat[j][i] / mat[i][i]
            for k in range(i, n + 1):
                mat[j][k] -= factor * mat[i][k]
    
    solutions = [0] * n
    for i in range(n - 1, -1, -1):
        solutions[i] = (mat[i][n] - sum(mat[i][j] * solutions[j] for j in range(i + 1, n))) / mat[i][i]
    
    return solutions

# Example usage
mat = [[3.0, 2.0, -4.0, 3.0], [2.0, 3.0, 3.0, 15.0], [5.0, -3, 1.0, 14.0]]
solutions = gaussian_elimination(mat)
print("\nSolution for the system:")
for sol in solutions:
    print("{:.8f}".format(sol))



Question:- LU factorization method

answer :-


MAX = 100


def luDecomposition(mat, n):

	lower = [[0 for x in range(n)]
			for y in range(n)]
	upper = [[0 for x in range(n)]
			for y in range(n)]

	
	for i in range(n):

		
		for k in range(i, n):

			
			sum = 0
			for j in range(i):
				sum += (lower[i][j] * upper[j][k])

			
			upper[i][k] = mat[i][k] - sum

		
		for k in range(i, n):
			if (i == k):
				lower[i][i] = 1 # Diagonal as 1
			else:

				
				sum = 0
				for j in range(i):
					sum += (lower[k][j] * upper[j][i])

				
				lower[k][i] = int((mat[k][i] - sum) /
								upper[i][i])

	
	print("Lower Triangular\t\tUpper Triangular")

	
	for i in range(n):

		
		for j in range(n):
			print(lower[i][j], end="\t")
		print("", end="\t")

		
		for j in range(n):
			print(upper[i][j], end="\t")
		print("")



mat = [[2, -1, -2],
	[-4, 6, 3],
	[-4, -2, 8]]

luDecomposition(mat, 3)
